VQWeightDehazeNet(
  (multiscale_encoder): MultiScaleEncoder(
    (in_conv): Conv2d(3, 64, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (1): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
      (1): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (1): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 256, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 256, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 256, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 256, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (decoder_group): ModuleList(
    (0): DecoderBlock(
      (block): Sequential(
        (0): Upsample(scale_factor=2.0, mode='nearest')
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 128, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
    (1): DecoderBlock(
      (block): Sequential(
        (0): Upsample(scale_factor=2.0, mode='nearest')
        (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 64, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 64, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): ResBlock(
          (conv): Sequential(
            (0): NormLayer(
              (norm): GroupNorm(32, 64, eps=1e-06, affine=True)
            )
            (1): ActLayer(
              (func): SiLU(inplace=True)
            )
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): NormLayer(
              (norm): GroupNorm(32, 64, eps=1e-06, affine=True)
            )
            (4): ActLayer(
              (func): SiLU(inplace=True)
            )
            (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (out_conv): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (residual_conv): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (quantize_group): ModuleList(
    (0): VectorQuantizer(
      (embedding): Embedding(1024, 512)
    )
  )
  (before_quant_group): ModuleList(
    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
  )
  (after_quant_group): ModuleList(
    (0): CombineQuantBlock(
      (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)
